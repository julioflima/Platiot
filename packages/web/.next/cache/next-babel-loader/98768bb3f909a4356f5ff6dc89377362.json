{"ast":null,"code":"var _s = $RefreshSig$();\n\n// ..src/hooks/useLocalStorage.ts\nimport { useState } from 'react';\nexport function useLocalStorage(key) {\n  _s();\n\n  var initialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue;\n    }\n  }),\n      storedValue = _useState[0],\n      setStoredValue = _useState[1]; // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"UEITRxfju7DDwPvXrtLUyq/t3lk=\");","map":{"version":3,"sources":["/home/juloko/brother.bet/packages/web/src/hooks/useLocalStorage.ts"],"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify","console","log"],"mappings":";;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAA8D;AAAA;;AAAA,MAAxBC,YAAwB,uEAAJ,EAAI;;AACnE;AACA;AAFmE,kBAG7BH,QAAQ,CAAC,YAAM;AACnD,QAAI;AACF;AACA,UAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAFE,CAGF;;AACA,aAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;AACD,KALD,CAKE,OAAOO,KAAP,EAAc;AACd;AACA,aAAOP,YAAP;AACD;AACF,GAV6C,CAHqB;AAAA,MAG5DQ,WAH4D;AAAA,MAG/CC,cAH+C,iBAenE;AACA;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,QAAI;AACF;AACA,UAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KAAtE,CAFE,CAGF;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd,CAJE,CAKF;;AACAV,MAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4Bf,GAA5B,EAAiCM,IAAI,CAACU,SAAL,CAAeH,YAAf,CAAjC;AACD,KAPD,CAOE,OAAOL,KAAP,EAAc;AACd;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD;AACF,GAZD;;AAcA,SAAO,CAACC,WAAD,EAAcE,QAAd,CAAP;AACD;;GAhCeZ,e","sourcesContent":["// ..src/hooks/useLocalStorage.ts\nimport { useState } from 'react'\n\nexport function useLocalStorage(key: string, initialValue: any = '') {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"]},"metadata":{},"sourceType":"module"}