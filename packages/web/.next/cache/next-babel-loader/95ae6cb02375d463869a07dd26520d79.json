{"ast":null,"code":"// ..src/hooks/useLocalStorage.ts\nimport { useState } from 'react';\nexport function useLocalStorage(key, initialValue = '') {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const {\n    0: storedValue,\n    1: setStoredValue\n  } = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}","map":{"version":3,"sources":["/home/juloko/brother.bet/packages/web/src/hooks/useLocalStorage.ts"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","setValue","value","valueToStore","Function","setItem","stringify","console","log"],"mappings":"AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAAsCC,YAAiB,GAAG,EAA1D,EAA8D;AACnE;AACA;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,MAAM;AACnD,QAAI;AACF;AACA,YAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFE,CAGF;;AACA,aAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;AACD,KALD,CAKE,OAAOS,KAAP,EAAc;AACd;AACA,aAAOT,YAAP;AACD;AACF,GAV6C,CAA9C,CAHmE,CAenE;AACA;;AACA,QAAMU,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAI;AACF;AACA,YAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACV,WAAD,CAAjC,GAAiDU,KAAtE,CAFE,CAGF;;AACAT,MAAAA,cAAc,CAACU,YAAD,CAAd,CAJE,CAKF;;AACAR,MAAAA,MAAM,CAACC,YAAP,CAAoBS,OAApB,CAA4Bf,GAA5B,EAAiCQ,IAAI,CAACQ,SAAL,CAAeH,YAAf,CAAjC;AACD,KAPD,CAOE,OAAOH,KAAP,EAAc;AACd;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACD;AACF,GAZD;;AAcA,SAAO,CAACR,WAAD,EAAcS,QAAd,CAAP;AACD","sourcesContent":["// ..src/hooks/useLocalStorage.ts\nimport { useState } from 'react'\n\nexport function useLocalStorage(key: string, initialValue: any = '') {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key)\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      // If error also return initialValue\n      return initialValue\n    }\n  })\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value\n      // Save state\n      setStoredValue(valueToStore)\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n"]},"metadata":{},"sourceType":"module"}