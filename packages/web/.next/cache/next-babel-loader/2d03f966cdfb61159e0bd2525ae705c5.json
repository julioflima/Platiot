{"ast":null,"code":"var _s = $RefreshSig$();\n\n// ..src/hooks/useTranslation.ts\nimport { useContext } from 'react';\nimport { LanguageContext } from '../context/LanguageContext';\nexport default function useTranslation() {\n  _s();\n\n  var _useContext = useContext(LanguageContext),\n      localization = _useContext.localization;\n\n  function t(key) {\n    if (!localization.translations[key]) {\n      console.warn(\"Translation '\".concat(key, \"' for locale '\").concat(localization.locale, \"' not found.\"));\n    }\n\n    return localization.translations[key] || '';\n  }\n\n  function translate(key) {\n    if (!localization.translations[key]) {\n      console.warn(\"Translation '\".concat(key, \"' for locale '\").concat(localization.locale, \"' not found.\"));\n    }\n\n    return localization.translations[key] || '';\n  }\n\n  return {\n    t: t,\n    translate: translate,\n    locale: localization.locale\n  };\n}\n\n_s(useTranslation, \"jPX3NTYytS4f0YH1F4wTwLhlZKk=\");","map":{"version":3,"sources":["/home/juloko/brother.bet/packages/web/src/hooks/useTranslation.ts"],"names":["useContext","LanguageContext","useTranslation","localization","t","key","translations","console","warn","locale","translate"],"mappings":";;AAAA;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AAAA,oBACdF,UAAU,CAACC,eAAD,CADI;AAAA,MAC/BE,YAD+B,eAC/BA,YAD+B;;AAGvC,WAASC,CAAT,CAAWC,GAAX,EAAwB;AACtB,QAAI,CAACF,YAAY,CAACG,YAAb,CAA0BD,GAA1B,CAAL,EAAqC;AACnCE,MAAAA,OAAO,CAACC,IAAR,wBAA6BH,GAA7B,2BAAiDF,YAAY,CAACM,MAA9D;AACD;;AACD,WAAON,YAAY,CAACG,YAAb,CAA0BD,GAA1B,KAAkC,EAAzC;AACD;;AAED,WAASK,SAAT,CAAmBL,GAAnB,EAAgC;AAC9B,QAAI,CAACF,YAAY,CAACG,YAAb,CAA0BD,GAA1B,CAAL,EAAqC;AACnCE,MAAAA,OAAO,CAACC,IAAR,wBAA6BH,GAA7B,2BAAiDF,YAAY,CAACM,MAA9D;AACD;;AACD,WAAON,YAAY,CAACG,YAAb,CAA0BD,GAA1B,KAAkC,EAAzC;AACD;;AAED,SAAO;AACLD,IAAAA,CAAC,EAADA,CADK;AAELM,IAAAA,SAAS,EAATA,SAFK;AAGLD,IAAAA,MAAM,EAAEN,YAAY,CAACM;AAHhB,GAAP;AAKD;;GAtBuBP,c","sourcesContent":["// ..src/hooks/useTranslation.ts\nimport { useContext } from 'react'\nimport { LanguageContext } from '../context/LanguageContext'\n\nexport default function useTranslation() {\n  const { localization } = useContext(LanguageContext)\n\n  function t(key: string) {\n    if (!localization.translations[key]) {\n      console.warn(`Translation '${key}' for locale '${localization.locale}' not found.`)\n    }\n    return localization.translations[key] || ''\n  }\n\n  function translate(key: string) {\n    if (!localization.translations[key]) {\n      console.warn(`Translation '${key}' for locale '${localization.locale}' not found.`)\n    }\n    return localization.translations[key] || ''\n  }\n\n  return {\n    t,\n    translate,\n    locale: localization.locale,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}