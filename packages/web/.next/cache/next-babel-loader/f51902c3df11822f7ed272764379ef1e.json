{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/juloko/Desktop/Platiot/packages/web/src/context/LanguageContext.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { isLocale } from '../translations/types';\nimport defaultStrings from '../translations/locales/en';\nimport locales from '../translations/locales';\n/**\n * Language Context\n */\n\nexport var LanguageContext = React.createContext({\n  localization: {\n    locale: 'en',\n    // default lang\n    translations: defaultStrings.common,\n    // default translations TODO: what to do here?\n    namespace: 'common' // default namespace TODO: could we null this? 'common' might be misleading\n\n  },\n  setLocale: function setLocale() {\n    return null;\n  }\n});\n/**\n * Language Context: Provider\n */\n\nexport var LanguageProvider = function LanguageProvider(_ref) {\n  _s();\n\n  var localization = _ref.localization,\n      children = _ref.children;\n\n  var _React$useState = React.useState({\n    locale: localization === null || localization === void 0 ? void 0 : localization.locale,\n    translations: localization === null || localization === void 0 ? void 0 : localization.translations,\n    namespace: localization === null || localization === void 0 ? void 0 : localization.namespace\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      localizationState = _React$useState2[0],\n      setLocalizationState = _React$useState2[1];\n\n  var _useLocalStorage = useLocalStorage('locale'),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      getStoredLocale = _useLocalStorage2[0],\n      setStoredLocale = _useLocalStorage2[1];\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  React.useEffect(function () {\n    if (localizationState.locale !== getStoredLocale) {\n      setStoredLocale(localizationState.locale);\n    }\n  }, [localizationState]);\n  React.useEffect(function () {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && (localization === null || localization === void 0 ? void 0 : localization.locale) !== query.lang) {\n      setLocalizationState({\n        locale: localization === null || localization === void 0 ? void 0 : localization.locale,\n        translations: localization === null || localization === void 0 ? void 0 : localization.translations,\n        namespace: localization === null || localization === void 0 ? void 0 : localization.namespace\n      });\n    }\n  }, [query.lang, localizationState]);\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      localization: localization,\n      setLocale: setLocalizationState\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, children);\n};\n\n_s(LanguageProvider, \"aw7SjqTTFyhVCU83LeZHLhBZwuE=\", false, function () {\n  return [useLocalStorage, useRouter];\n});\n\n_c = LanguageProvider;\nexport var getLocalizationProps = function getLocalizationProps(ctx, namespace) {\n  var _ctx$params, _ctx$params2;\n\n  var lang = ((_ctx$params = ctx.params) === null || _ctx$params === void 0 ? void 0 : _ctx$params.lang) || 'pt';\n  var locale = locales[lang];\n  var strings = locale[namespace];\n\n  var translations = _objectSpread({\n    common: locales[lang].common\n  }, strings);\n\n  return {\n    locale: ((_ctx$params2 = ctx.params) === null || _ctx$params2 === void 0 ? void 0 : _ctx$params2.lang) || 'en',\n    translations: translations,\n    namespace: namespace\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"sources":["/home/juloko/Desktop/Platiot/packages/web/src/context/LanguageContext.tsx"],"names":["React","useRouter","useLocalStorage","isLocale","defaultStrings","locales","LanguageContext","createContext","localization","locale","translations","common","namespace","setLocale","LanguageProvider","children","useState","localizationState","setLocalizationState","getStoredLocale","setStoredLocale","query","useEffect","lang","getLocalizationProps","ctx","params","strings"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useRouter } from 'next/router'\nimport { useLocalStorage } from '../hooks/useLocalStorage'\nimport { isLocale, Localization, Locale } from '../translations/types'\nimport defaultStrings from '../translations/locales/en'\nimport locales from '../translations/locales'\n\n/**\n * Language Context\n */\n\ninterface ContextProps {\n  readonly localization: Localization\n  readonly setLocale: (localization: Localization) => void\n}\n\nexport const LanguageContext = React.createContext<ContextProps>({\n  localization: {\n    locale: 'en', // default lang\n    translations: defaultStrings.common, // default translations TODO: what to do here?\n    namespace: 'common', // default namespace TODO: could we null this? 'common' might be misleading\n  },\n  setLocale: () => null,\n})\n\n/**\n * Language Context: Provider\n */\n\nexport const LanguageProvider: React.FC<{ localization: Localization }> = ({\n  localization,\n  children,\n}) => {\n  const [localizationState, setLocalizationState] = React.useState({\n    locale: localization?.locale,\n    translations: localization?.translations,\n    namespace: localization?.namespace,\n  })\n  const [getStoredLocale, setStoredLocale] = useLocalStorage('locale')\n  const { query } = useRouter()\n  React.useEffect(() => {\n    if (localizationState.locale !== getStoredLocale) {\n      setStoredLocale(localizationState.locale)\n    }\n  }, [localizationState])\n\n  React.useEffect(() => {\n    if (\n      typeof query.lang === 'string' &&\n      isLocale(query.lang) &&\n      localization?.locale !== query.lang\n    ) {\n      setLocalizationState({\n        locale: localization?.locale,\n        translations: localization?.translations,\n        namespace: localization?.namespace,\n      })\n    }\n  }, [query.lang, localizationState])\n\n  return (\n    <LanguageContext.Provider value={{ localization, setLocale: setLocalizationState }}>\n      {children}\n    </LanguageContext.Provider>\n  )\n}\n\nexport const getLocalizationProps = (ctx, namespace) => {\n  const lang: Locale = (ctx.params?.lang as Locale) || 'pt'\n  const locale: any = locales[lang]\n  const strings: any = locale[namespace]\n  const translations = {\n    common: locales[lang].common,\n    ...strings,\n  }\n  return {\n    locale: ctx.params?.lang || 'en',\n    translations,\n    namespace,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}